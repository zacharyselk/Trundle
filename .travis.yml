language: cpp
os: 
  - linux
  - osx
dist: bionic

compiler: clang

cache:
- directories:
  - $HOME/.cache

addons:
  apt:
    packages:
      - lcov

install:
  - mkdir -p $HOME/.cache
  - export CMAKE_EXTRA_FLAGS=""

  # Download CMake 3.18 binaries
  - mkdir -p $HOME/.cache/cmake3.18
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then wget -qO- https://github.com/Kitware/CMake/releases/download/v3.18.1/cmake-3.18.1-Linux-x86_64.tar.gz | tar xpoz -C $HOME/.cache/cmake3.18 --strip-components 1; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export PATH=$HOME/.cache/cmake3.18/bin:$PATH; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then curl -L https://github.com/Kitware/CMake/releases/download/v3.18.1/cmake-3.18.1-Darwin-x86_64.tar.gz | tar xpoz -C $HOME/.cache/cmake3.18 --strip-components 1; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export PATH=$HOME/.cache/cmake3.18/CMake.app/Contents/bin:$PATH; fi

  # Download llvm 10.0 binaries
  - mkdir -p $HOME/.cache/llvm10.0
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then curl -L https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-apple-darwin.tar.xz | tar xpoz -C $HOME/.cache/llvm10.0 --strip-components 1; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export PATH=$HOME/.cache/llvm10.0/bin:$PATH; - export CMAKE_EXTRA_FLAGS="$CMAKE_EXTRA_FLAGS -DCMAKE_LINKER=$HOME/.cache/llvm10.0/bin/lld"; fi

  # GLFW Dependancies
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev; fi

  # OpenGL Dependancies
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install -y libgl1-mesa-dev; fi

  # Other
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install -y tree; fi

  - export CODECOV_TOKEN="55c385c2-a6b7-44ae-a868-d1377ef5e11f"


before_script:
  - env
  - rm -rf build || echo "No build exists yet"
  - mkdir build
  - cd build
  - cmake .. $CMAKE_EXTRA_FLAGS
  - pwd

script:
  - cmake --build .

after_failure:
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then tree ../..; fi

after_success:
  # - lcov --directory . --capture --output-file coverage.info
  # - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
  # - lcov --list coverage.info
  # - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

  # Clang-Tidy
  # - export PROJECT_TOKEN="YOUR-TOKEN"
  # - export COMMIT="COMMIT-UUID"

  # 1. Run Clang-Tidy
  # 2. Convert the Clang-Tidy output to a format that the Codacy API accepts
  # 3. Send the results to Codacy
  #- clang-tidy "<clang-tidy-configs>" | ./codacy-clang-tidy-"<version>" | curl -XPOST -L -H "project-token: $PROJECT_TOKEN" -H "Content-type: application/json" -d @- "https://api.codacy.com/2.0/commit/$COMMIT/issuesRemoteResults"

  # 4. Signal that Codacy can use the sent results and start a new analysis
  #- curl -XPOST -L -H "project-token: $PROJECT_TOKEN" -H "Content-type: application/json" "https://api.codacy.com/2.0/commit/$COMMIT/resultsFinal"

  - echo "Finished"
